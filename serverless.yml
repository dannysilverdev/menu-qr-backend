service: menu-qr-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, self:custom.defaultRegion}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/MenuQrUsersTable
    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource:
        - "arn:aws:execute-api:${self:provider.region}:*:*"

functions:
  signup:
    handler: handler.signup
    events:
      - http:
          path: signup
          method: post
          cors:
            origin: 'https://dljrvybt2jogj.cloudfront.net'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  login:
    handler: handler.login
    events:
      - http:
          path: login
          method: post
          cors:
            origin: 'https://dljrvybt2jogj.cloudfront.net'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  home:
    handler: handler.home
    events:
      - http:
          path: home
          method: get
          cors:
            origin: 'https://dljrvybt2jogj.cloudfront.net'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  menu:
    handler: handler.menu
    events:
      - http:
          path: menu
          method: get
          cors:
            origin: 'https://dljrvybt2jogj.cloudfront.net'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  createCategory:
    handler: handler.createCategory
    events:
      - http:
          path: menu/category
          method: post
          cors:
            origin: 'https://dljrvybt2jogj.cloudfront.net'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  getCategories:
    handler: handler.getCategories
    events:
      - http:
          path: categories/{userId}
          method: get
          cors:
            origin: 'https://dljrvybt2jogj.cloudfront.net'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  deleteCategory:
    handler: handler.deleteCategory
    events:
      - http:
          path: menu/category/{categoryId}
          method: delete
          cors:
            origin: 'https://dljrvybt2jogj.cloudfront.net'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  deleteProduct:
    handler: handler.deleteProduct
    events:
      - http:
          path: menu/category/{categoryId}/product/{productId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: menu/category/{categoryId}/product
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

resources:
  Resources:
    MenuQrUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MenuQrUsersTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: categoryId-index
            KeySchema:
              - AttributeName: categoryId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    GatewayResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'https://dljrvybt2jogj.cloudfront.net'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type, Authorization'"
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET, POST, OPTIONS'"
          "gatewayresponse.header.Access-Control-Allow-Credentials": "'true'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  defaultRegion: us-east-1

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      noStart: true  # No intentará iniciar DynamoDB si ya está corriendo en Docker
