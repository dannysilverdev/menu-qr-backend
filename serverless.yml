service: menu-qr-backend

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    BUCKET_NAME: ${env:BUCKET_NAME, 'mi-bucket-de-produccion'}
    USERS_TABLE: MenuQrUsersTable-${opt:stage, 'dev'}
    NODE_ENV: ${opt:stage, 'dev'}
#    NODE_OPTIONS: "--max-old-space-size=8192"
    DYNAMODB_ENDPOINT: http://localhost:8000
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "s3:GetObject"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/MenuQrUsersTable-${opt:stage, 'dev'}"
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/MenuQrUsersTable-${opt:stage, 'dev'}/index/categoryId-index"
    - Effect: "Allow"
      Action:
        - "execute-api:Invoke"
      Resource:
        - "arn:aws:execute-api:${self:provider.region}:${aws:accountId}:*/*"

# Carga variables de entorno desde .env
useDotenv: true

functions:
  # Funciones de Registro y Login
  signup:
    handler: handlers/authHandler.signup
    events:
      - http:
          path: signup
          method: post
          cors: ${self:custom.corsConfigExtended}

  login:
    handler: handlers/authHandler.login
    events:
      - http:
          path: login
          method: post
          cors: ${self:custom.corsConfigExtended}

  # Funciones de usuario
  getUser:
    handler: handlers/userHandler.getUser
    events:
      - http:
          path: user/{userId}
          method: get
          cors: ${self:custom.corsConfig}

  updateUserProfile:
    handler: handlers/updateHandler.updateUserProfile
    timeout: 30
    events:
      - http:
          path: user/update/{userId}
          method: put
          cors: ${self:custom.corsConfigExtended}

  # Funciones de manejo del menú
  home:
    handler: handlers/navigationHandler.home
    events:
      - http:
          path: home
          method: get
          cors: ${self:custom.corsConfig}

  menu:
    handler: handlers/menuHandler.menu
    events:
      - http:
          path: menu
          method: get
          cors: ${self:custom.corsConfig}

  viewMenu:
    handler: handlers/navigationHandler.viewMenu
    events:
      - http:
          path: view-menu/{userId}
          method: get
          cors: ${self:custom.corsPublic}

# Update data
  updateCategory:
    handler: handlers/updateHandler.updateCategory
    events:
      - http:
          path: menu/category/{categoryId}/update
          method: put
          cors: ${self:custom.corsConfigExtended}

  updateProduct:
    handler: handlers/updateHandler.updateProduct
    events:
      - http:
          path: menu/product/{productId}/update
          method: put
          cors: ${self:custom.corsConfigExtended}

# Funciones de categorías
  createCategory:
    handler: handlers/categoryHandler.createCategory
    events:
      - http:
          path: menu/category
          method: post
          cors: ${self:custom.corsConfig}

  getCategories:
    handler: handlers/categoryHandler.getCategories
    events:
      - http:
          path: categories/{userId}
          method: get
          cors: ${self:custom.corsConfig}

  deleteCategory:
    handler: handlers/categoryHandler.deleteCategory
    events:
      - http:
          path: menu/category/{categoryId}
          method: delete
          cors: ${self:custom.corsConfig}


  # Funciones de productos
  createProduct:
    handler: handlers/productHandler.createProduct
    events:
      - http:
          path: menu/category/{categoryId}/product
          method: post
          cors: ${self:custom.corsConfig}

  deleteProduct:
    handler: handlers/productHandler.deleteProduct
    events:
      - http:
          path: menu/category/{categoryId}/product/{productId}
          method: delete
          cors: ${self:custom.corsConfig}

# ----------

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MenuQrUsersTable-${opt:stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: categoryId-index
            KeySchema:
              - AttributeName: categoryId
                KeyType: HASH
              - AttributeName: SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    GatewayResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'https://dljrvybt2jogj.cloudfront.net'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type, Authorization'"
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
          "gatewayresponse.header.Access-Control-Allow-Credentials": "'true'"

        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

plugins:
  - serverless-offline

custom:    
#  esbuild: false 
#  esbuild:
#    bundle: false
#    minify: false
#    sourcemap: true
#    target: 'node18'
#    exclude: ['aws-sdk']
#    concurrency: 15
    
  defaultRegion: us-east-1

  corsConfig: # Configuración estándar CORS
    origin: 'https://dljrvybt2jogj.cloudfront.net'
    headers:
      - Content-Type
      - Authorization
    allowCredentials: true

  corsConfigExtended: # Configuración CORS extendida
    origin: 'https://dljrvybt2jogj.cloudfront.net'
    headers:
      - Content-Type
      - Authorization
      - X-Amz-Date
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
    allowCredentials: true

  corsPublic: # Configuración CORS para rutas públicas
    origin: '*'
    headers:
      - Content-Type
    allowCredentials: false

package:
  individually: true
  excludeDevDependencies: true
#  patterns:
#    - '!.git/**'
#    - '!.vscode/**'
#    - '!tests/**'
#    - '!.env*'
#    - '!docs/**'
#    - '!*.md'
#    - '!**/*.ts'
#    - '!**/*.d.ts'
#    - '!node_modules/aws-sdk/**'
#    - '!node_modules/.bin/**'
#    - '!.serverless/**'
#    - '!package-lock.json'